@{
    Layout = null;
    <link rel="stylesheet/less" href="~/Content/less/sidenav.less">
}
@using AngularJS_CS.ViewModels
@using AngularJS_CS.Controllers
@using AngularJS_CS.Models
@model AngularJS_CS.ViewModels.AnswerView

@section scripts{
    <!--Script references. -->
    @*<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>*@
    <!--Reference the autogenerated SignalR hub script. -->
    <!--<script src="/signalr/hubs"></script>-->
}
<!--Script references. -->
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="/signalr/hubs"></script>
<div id="Overlay" class="overlay" onclick="closeNav()">

</div>

<div id="Sidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    @if (Request.IsAuthenticated)
    {
        <section id="message_section">
            <a href="#" type="title">Messages</a>
            <div>
                <ul id="listNotifs"></ul>>
                <script type="text/javascript">
                    $(function () {
                        // Declare a proxy to reference the hub.
                        var notifs = $.connection.notificationsHub;
                        // Create a function that the hub can call to broadcast messages.
                        notifs.client.broadcastNotification = function (id, sujet, dEnvoi, contenu, optionsCount, options) {
                            // Html encode display name and message.
                            var beginForm = '<form action="/Question/Retorque" method="post">';
                            var subtitle = '<a href="#" type="subtitle">' + (sujet == "" || sujet == null) ? "Aucun sujet" : sujet + '</a>';
                            var dSent = '<p>Envoyé le ' + dEnvoi + '</p>';
                            var contenu = '<p>' + contenu + '</p>'
                            var selectList = ""
                            var endContent = "";

                            if (optionsCount > 0) {
                                selectList += '<select name="repchosen" id="list_rep" required="True" type="rep_list" data-val-required="Le champ repchosen est requis." data-val="true" data-val-number="Le champ repchosen doit être un nombre."><option value="">Réponses</option>';
                                for (var i = 0; i < optionsCount; i++) {
                                    selectList += "<option value=" + i + ">" + options[i] + "</option>";
                                }
                                selectList += "</select>";
                            }
                            // Add the message to the page.
                            $('#listNotifs').prepend('<li>'
                                + beginForm
                                + subtitle
                                + dSent
                                + contenu
                                + selectList
                                + endContent
                                + '<input id="Answer" type= "submit" value= "Répondre &#128389;" onclick= "closeNav(); @*submitFormWithModel(' + id +',' + @HttpContext.Current.Request.Url.AbsolutePath  +',' + sujet +',' + dest +',' + rep +','+ repChosen +')*@"/>'
                                + "</form>"
                                + '</li>');
                        };
                        // Start the connection.
                        $.connection.hub.start().done(function () {
                            //Hub en lecture seule, rien à mettre ici.
                        });
                    });
                </script>
                <section>
                    <a href="#" type="title">Questions</a>
                    <hr />
                    <a href="Question/Inex" type="action">Nouvelle Question</a>
                    @foreach (Notification_Simple mes in new Dal().GetIndividus().Find(i => i.Id == int.Parse(HttpContext.Current.User.Identity.Name)).Notification_Simple.ToList().FindAll(n => !n.Message.lu && n.Message.Questionnaire.Count > 0))
                    {
                        <div type="mes">
                            @using (Html.BeginForm("Retorque", "Question", FormMethod.Post))
                            {
                                if (!mes.Message.lu /*&& mes.Message.envoi.Hour <= System.DateTime.Now.Hour + 1*/)
                                {
                                    Model.Id_message = mes.Id_message;
                                    Model.Actualurl = HttpContext.Current.Request.Url.AbsolutePath;
                                    mes.Message.recu = true;
                                    Model.Subject = mes.Message.sujet == "" ? "Aucun sujet" : mes.Message.sujet;
                                    Model.Dest = mes.Message.Id_expediteur;
                                    if (mes.Message.sujet == "" || mes.Message.sujet == null)
                                    { @Html.ActionLink("Aucun sujet", "Read", "Question", null, htmlAttributes: new { type = "subtitle" })/*<a type="subtitle" href="#">Aucun sujet</a>*/
                                    }
                                    else
                                    { @*@Html.ActionLink(mes.Message.sujet, "Read", "Question", Model, htmlAttributes: new { type = "subtitle" });*@ <a type="subtitle" href="#">@(mes.Message.sujet)</a> }
                                    <p>
                                        Envoyé le @(mes.Message.envoi)
                                        Par @mes.Message.Individu.nom @mes.Message.Individu.prenom
                                    </p>
                                    <p>@(mes.Message.contenu)</p>
                                    ViewBag.Reps = new SelectList(mes.Message.Questionnaire.ElementAt(0).Reponses, "Id_reponse", "Option_Questionnaire.valeur");
                                    @Html.DropDownListFor(model => model.Repchosen, ViewBag.Reps as SelectList, "Réponses", htmlAttributes: new { name = "repchosen", id = "list_rep", type = "rep_list", required = "True" })
                                    @Html.TextAreaFor(model => model.Rep, htmlAttributes: new { type = "repbox", id = "reptext", name = "rep" })
                                    @Html.HiddenFor(model => model.Subject)
                                    @Html.HiddenFor(model => model.Dest)
                                    @Html.HiddenFor(model => model.Actualurl)
                                    @Html.HiddenFor(model => model.Id_message)
                                    <input id="Answer" type="submit" value="Répondre &#128389;" onclick="closeNav()" />
                                }
                            }
                        </div>
                        <hr />
                    }
                </section>
        </section>
    }
    <a href="#">Services</a>
    <a href="#">Clients</a>
    <a href="#">Contact</a>
</div>